import java.util.Scanner;

// Custom exception class for handling stack-related abnormalities
class StackException extends Exception {
    public StackException(String message) {
        super(message);
    }
}

// Generic Stack class
class Stack {
    private int maxSize;  // Maximum size of the stack
    private int[] stackArray;  // Array to store the stack elements
    private int top;  // Index of the top element

    // Constructor to initialize the stack with a specific size
    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1;  // Empty stack
    }

    // Method to add an element to the stack
    public void push(int value) throws StackException {
        if (isFull()) {
            throw new StackException("Stack Overflow: Cannot push " + value + " as the stack is full.");
        }
        stackArray[++top] = value;  // Increment top and add value
    }

    // Method to remove an element from the stack
    public int pop() throws StackException {
        if (isEmpty()) {
            throw new StackException("Stack Underflow: Cannot pop as the stack is empty.");
        }
        return stackArray[top--];  // Return value and decrement top
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Check if the stack is full
    public boolean isFull() {
        return top == maxSize - 1;
    }

    // Display the elements in the stack
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
        } else {
            System.out.print("Stack elements: ");
            for (int i = 0; i <= top; i++) {
                System.out.print(stackArray[i] + " ");
            }
            System.out.println();
        }
    }
}

// Class to demonstrate menu-driven stack operations
public class StackDemo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the stack: ");
        int size = sc.nextInt();
        Stack stack = new Stack(size);  // Create a stack with a given size

        int choice = -1;

        // Menu-driven program
        while (choice != 4) {
            System.out.println("\n--- Stack Operations Menu ---");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Display");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    try {
                        System.out.print("Enter the value to push: ");
                        int value = sc.nextInt();
                        stack.push(value);
                        System.out.println("Pushed " + value + " onto the stack.");
                    } catch (StackException e) {
                        System.out.println(e.getMessage());
                    }
                    break;

                case 2:
                    try {
                        int poppedValue = stack.pop();
                        System.out.println("Popped " + poppedValue + " from the stack.");
                    } catch (StackException e) {
                        System.out.println(e.getMessage());
                    }
                    break;

                case 3:
                    stack.display();
                    break;

                case 4:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }

        sc.close();
    }
}
